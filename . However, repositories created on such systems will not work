GIT-COMMIT(1)                                                                            Git Manual                                                                            GIT-COMMIT(1)

[1mNAME[0m
       git-commit - Record changes to the repository

[1mSYNOPSIS[0m
       [4mgit[24m [4mcommit[24m [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
                  [--dry-run] [(-c | -C | --fixup | --squash) <commit>]
                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]
                  [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
                  [-S[<keyid>]] [--] [<pathspec>...]

[1mDESCRIPTION[0m
       Create a new commit containing the current contents of the index and the given log message describing the changes. The new commit is a direct child of HEAD, usually the tip of the
       current branch, and the branch is updated to point to it (unless no branch is associated with the working tree, in which case HEAD is "detached" as described in [1mgit-checkout[22m(1)).

       The content to be committed can be specified in several ways:

        1. by using [1mgit-add[22m(1) to incrementally "add" changes to the index before using the [4mcommit[24m command (Note: even modified files must be "added");

        2. by using [1mgit-rm[22m(1) to remove files from the working tree and the index, again before using the [4mcommit[24m command;

        3. by listing files as arguments to the [4mcommit[24m command (without --interactive or --patch switch), in which case the commit will ignore changes staged in the index, and instead
           record the current content of the listed files (which must already be known to Git);

        4. by using the -a switch with the [4mcommit[24m command to automatically "add" changes from all known files (i.e. all files that are already listed in the index) and to automatically
           "rm" files in the index that have been removed from the working tree, and then perform the actual commit;

        5. by using the --interactive or --patch switches with the [4mcommit[24m command to decide one by one which files or hunks should be part of the commit in addition to contents in the
           index, before finalizing the operation. See the ‚ÄúInteractive Mode‚Äù section of [1mgit-add[22m(1) to learn how to operate these modes.

       The [1m--dry-run [22moption can be used to obtain a summary of what is included by any of the above for the next commit by giving the same set of parameters (options and paths).

       If you make a commit and then find a mistake immediately after that, you can recover from it with [4mgit[24m [4mreset[24m.

[1mOPTIONS[0m
       -a, --all
           Tell the command to automatically stage files that have been modified and deleted, but new files you have not told Git about are not affected.

       -p, --patch
           Use the interactive patch selection interface to chose which changes to commit. See [1mgit-add[22m(1) for details.

       -C <commit>, --reuse-message=<commit>
           Take an existing commit object, and reuse the log message and the authorship information (including the timestamp) when creating the commit.

       -c <commit>, --reedit-message=<commit>
           Like [4m-C[24m, but with [1m-c [22mthe editor is invoked, so that the user can further edit the commit message.

       --fixup=<commit>
           Construct a commit message for use with [1mrebase --autosquash[22m. The commit message will be the subject line from the specified commit with a prefix of "fixup! ". See [1mgit-rebase[22m(1)
           for details.

       --squash=<commit>
           Construct a commit message for use with [1mrebase --autosquash[22m. The commit message subject line is taken from the specified commit with a prefix of "squash! ". Can be used with
           additional commit message options ([1m-m[22m/[1m-c[22m/[1m-C[22m/[1m-F[22m). See [1mgit-rebase[22m(1) for details.

       --reset-author
           When used with -C/-c/--amend options, or when committing after a conflicting cherry-pick, declare that the authorship of the resulting commit now belongs to the committer. This
           also renews the author timestamp.

       --short
           When doing a dry-run, give the output in the short-format. See [1mgit-status[22m(1) for details. Implies [1m--dry-run[22m.

       --branch
           Show the branch and tracking info even in short-format.

       --porcelain
           When doing a dry-run, give the output in a porcelain-ready format. See [1mgit-status[22m(1) for details. Implies [1m--dry-run[22m.

       --long
           When doing a dry-run, give the output in the long-format. Implies [1m--dry-run[22m.

       -z, --null
           When showing [1mshort [22mor [1mporcelain [22mstatus output, print the filename verbatim and terminate the entries with NUL, instead of LF. If no format is given, implies the [1m--porcelain[0m
           output format. Without the [1m-z [22moption, filenames with "unusual" characters are quoted as explained for the configuration variable [1mcore.quotePath [22m(see [1mgit-config[22m(1)).

       -F <file>, --file=<file>
           Take the commit message from the given file. Use [4m-[24m to read the message from the standard input.

       --author=<author>
           Override the commit author. Specify an explicit author using the standard [1mA U Thor <author@example.com> [22mformat. Otherwise <author> is assumed to be a pattern and is used to
           search for an existing commit by that author (i.e. rev-list --all -i --author=<author>); the commit author is then copied from the first such commit found.

       --date=<date>
           Override the author date used in the commit.

       -m <msg>, --message=<msg>
           Use the given <msg> as the commit message. If multiple [1m-m [22moptions are given, their values are concatenated as separate paragraphs.

           The [1m-m [22moption is mutually exclusive with [1m-c[22m, [1m-C[22m, and [1m-F[22m.

       -t <file>, --template=<file>
           When editing the commit message, start the editor with the contents in the given file. The [1mcommit.template [22mconfiguration variable is often used to give this option implicitly to
           the command. This mechanism can be used by projects that want to guide participants with some hints on what to write in the message in what order. If the user exits the editor
           without editing the message, the commit is aborted. This has no effect when a message is given by other means, e.g. with the [1m-m [22mor [1m-F [22moptions.

       -s, --signoff
           Add Signed-off-by line by the committer at the end of the commit log message. The meaning of a signoff depends on the project, but it typically certifies that committer has the
           rights to submit this work under the same license and agrees to a Developer Certificate of Origin (see [34m[1mhttp://developercertificate.org/ [0m[1m[22mfor more information).

       -n, --no-verify
           This option bypasses the pre-commit and commit-msg hooks. See also [1mgithooks[22m(5).

       --allow-empty
           Usually recording a commit that has the exact same tree as its sole parent commit is a mistake, and the command prevents you from making such a commit. This option bypasses the
           safety, and is primarily for use by foreign SCM interface scripts.

       --allow-empty-message
           Like --allow-empty this command is primarily for use by foreign SCM interface scripts. It allows you to create a commit with an empty commit message without using plumbing
           commands like [1mgit-commit-tree[22m(1).

       --cleanup=<mode>
           This option determines how the supplied commit message should be cleaned up before committing. The [4m<mode>[24m can be [1mstrip[22m, [1mwhitespace[22m, [1mverbatim[22m, [1mscissors [22mor [1mdefault[22m.

           strip
               Strip leading and trailing empty lines, trailing whitespace, commentary and collapse consecutive empty lines.

           whitespace
               Same as [1mstrip [22mexcept #commentary is not removed.

           verbatim
               Do not change the message at all.

           scissors
               Same as [1mwhitespace [22mexcept that everything from (and including) the line found below is truncated, if the message is to be edited. "[1m#[22m" can be customized with
               core.commentChar.

                   # ------------------------ >8 ------------------------

           default
               Same as [1mstrip [22mif the message is to be edited. Otherwise [1mwhitespace[22m.

           The default can be changed by the [1mcommit.cleanup [22mconfiguration variable (see [1mgit-config[22m(1)).

       -e, --edit
           The message taken from file with [1m-F[22m, command line with [1m-m[22m, and from commit object with [1m-C [22mare usually used as the commit log message unmodified. This option lets you further
           edit the message taken from these sources.

       --no-edit
           Use the selected commit message without launching an editor. For example, [1mgit commit --amend --no-edit [22mamends a commit without changing its commit message.

       --amend
           Replace the tip of the current branch by creating a new commit. The recorded tree is prepared as usual (including the effect of the [1m-i [22mand [1m-o [22moptions and explicit pathspec), and
           the message from the original commit is used as the starting point, instead of an empty message, when no other message is specified from the command line via options such as [1m-m[22m,
           [1m-F[22m, [1m-c[22m, etc. The new commit has the same parents and author as the current one (the [1m--reset-author [22moption can countermand this).

           It is a rough equivalent for:

                       $ git reset --soft HEAD^
                       $ ... do something else to come up with the right tree ...
                       $ git commit -c ORIG_HEAD

           but can be used to amend a merge commit.

           You should understand the implications of rewriting history if you amend a commit that has already been published. (See the "RECOVERING FROM UPSTREAM REBASE" section in [1mgit-[0m
           [1mrebase[22m(1).)

       --no-post-rewrite
           Bypass the post-rewrite hook.

       -i, --include
           Before making a commit out of staged contents so far, stage the contents of paths given on the command line as well. This is usually not what you want unless you are concluding
           a conflicted merge.

       -o, --only
           Make a commit by taking the updated working tree contents of the paths specified on the command line, disregarding any contents that have been staged for other paths. This is
           the default mode of operation of [4mgit[24m [4mcommit[24m if any paths are given on the command line, in which case this option can be omitted. If this option is specified together with
           [1m--amend[22m, then no paths need to be specified, which can be used to amend the last commit without committing changes that have already been staged. If used together with
           [1m--allow-empty [22mpaths are also not required, and an empty commit will be created.

       --pathspec-from-file=<file>
           Pathspec is passed in [1m<file> [22minstead of commandline args. If [1m<file> [22mis exactly [1m- [22mthen standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements
           can be quoted as explained for the configuration variable [1mcore.quotePath [22m(see [1mgit-config[22m(1)). See also [1m--pathspec-file-nul [22mand global [1m--literal-pathspecs[22m.

       --pathspec-file-nul
           Only meaningful with [1m--pathspec-from-file[22m. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).

       -u[<mode>], --untracked-files[=<mode>]
           Show untracked files.

           The mode parameter is optional (defaults to [4mall[24m), and is used to specify the handling of untracked files; when -u is not used, the default is [4mnormal[24m, i.e. show untracked files
           and directories.

           The possible options are:

           ‚Ä¢   [4mno[24m - Show no untracked files

           ‚Ä¢   [4mnormal[24m - Shows untracked files and directories

           ‚Ä¢   [4mall[24m - Also shows individual files in untracked directories.

           The default can be changed using the status.showUntrackedFiles configuration variable documented in [1mgit-config[22m(1).

       -v, --verbose
           Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template to help the user describe the commit by reminding what changes
           the commit has. Note that this diff output doesn‚Äôt have its lines prefixed with [4m#[24m. This diff will not be a part of the commit message. See the [1mcommit.verbose [22mconfiguration
           variable in [1mgit-config[22m(1).

           If specified twice, show in addition the unified diff between what would be committed and the worktree files, i.e. the unstaged changes to tracked files.

       -q, --quiet
           Suppress commit summary message.

       --dry-run
           Do not create a commit, but show a list of paths that are to be committed, paths with local changes that will be left uncommitted and paths that are untracked.

       --status
           Include the output of [1mgit-status[22m(1) in the commit message template when using an editor to prepare the commit message. Defaults to on, but can be used to override configuration
           variable commit.status.

       --no-status
           Do not include the output of [1mgit-status[22m(1) in the commit message template when using an editor to prepare the default commit message.

       -S[<keyid>], --gpg-sign[=<keyid>]
           GPG-sign commits. The [1mkeyid [22margument is optional and defaults to the committer identity; if specified, it must be stuck to the option without a space.

       --no-gpg-sign
           Countermand [1mcommit.gpgSign [22mconfiguration variable that is set to force each and every commit to be signed.

       --
           Do not interpret any more arguments as options.

       <pathspec>...
           When pathspec is given on the command line, commit the contents of the files that match the pathspec without recording the changes already added to the index. The contents of
           these files are also staged for the next commit on top of what have been staged before.

           For more details, see the [4mpathspec[24m entry in [1mgitglossary[22m(7).

[1mEXAMPLES[0m
       When recording your own work, the contents of modified files in your working tree are temporarily stored to a staging area called the "index" with [4mgit[24m [4madd[24m. A file can be reverted
       back, only in the index but not in the working tree, to that of the last commit with [1mgit restore --staged <file>[22m, which effectively reverts [4mgit[24m [4madd[24m and prevents the changes to this
       file from participating in the next commit. After building the state to be committed incrementally with these commands, [1mgit commit [22m(without any pathname parameter) is used to record
       what has been staged so far. This is the most basic form of the command. An example:

           $ edit hello.c
           $ git rm goodbye.c
           $ git add hello.c
           $ git commit

       Instead of staging files after each individual change, you can tell [1mgit commit [22mto notice the changes to the files whose contents are tracked in your working tree and do
       corresponding [1mgit add [22mand [1mgit rm [22mfor you. That is, this example does the same as the earlier example if there is no other change in your working tree:

           $ edit hello.c
           $ rm goodbye.c
           $ git commit -a

       The command [1mgit commit -a [22mfirst looks at your working tree, notices that you have modified hello.c and removed goodbye.c, and performs necessary [1mgit add [22mand [1mgit rm [22mfor you.

       After staging changes to many files, you can alter the order the changes are recorded in, by giving pathnames to [1mgit commit[22m. When pathnames are given, the command makes a commit
       that only records the changes made to the named paths:

           $ edit hello.c hello.h
           $ git add hello.c hello.h
           $ edit Makefile
           $ git commit Makefile

       This makes a commit that records the modification to [1mMakefile[22m. The changes staged for [1mhello.c [22mand [1mhello.h [22mare not included in the resulting commit. However, their changes are not
       lost ‚Äî they are still staged and merely held back. After the above sequence, if you do:

           $ git commit

       this second commit would record the changes to [1mhello.c [22mand [1mhello.h [22mas expected.

       After a merge (initiated by [4mgit[24m [4mmerge[24m or [4mgit[24m [4mpull[24m) stops because of conflicts, cleanly merged paths are already staged to be committed for you, and paths that conflicted are left in
       unmerged state. You would have to first check which paths are conflicting with [4mgit[24m [4mstatus[24m and after fixing them manually in your working tree, you would stage the result as usual
       with [4mgit[24m [4madd[24m:

           $ git status | grep unmerged
           unmerged: hello.c
           $ edit hello.c
           $ git add hello.c

       After resolving conflicts and staging the result, [1mgit ls-files -u [22mwould stop mentioning the conflicted path. When you are done, run [1mgit commit [22mto finally record the merge:

           $ git commit

       As with the case to record your own changes, you can use [1m-a [22moption to save typing. One difference is that during a merge resolution, you cannot use [1mgit commit [22mwith pathnames to
       alter the order the changes are committed, because the merge should be recorded as a single commit. In fact, the command refuses to run when given pathnames (but see [1m-i [22moption).

[1mCOMMIT INFORMATION[0m
       Author and committer information is taken from the following environment variables, if set:

           GIT_AUTHOR_NAME
           GIT_AUTHOR_EMAIL
           GIT_AUTHOR_DATE
           GIT_COMMITTER_NAME
           GIT_COMMITTER_EMAIL
           GIT_COMMITTER_DATE

       (nb "<", ">" and "\n"s are stripped)

       The author and committer names are by convention some form of a personal name (that is, the name by which other humans refer to you), although Git does not enforce or require any
       particular form. Arbitrary Unicode may be used, subject to the constraints listed above. This name has no effect on authentication; for that, see the [1mcredential.username [22mvariable in
       [1mgit-config[22m(1).

       In case (some of) these environment variables are not set, the information is taken from the configuration items [1muser.name [22mand [1muser.email[22m, or, if not present, the environment
       variable EMAIL, or, if that is not set, system user name and the hostname used for outgoing mail (taken from [1m/etc/mailname [22mand falling back to the fully qualified hostname when that
       file does not exist).

       The [1mauthor.name [22mand [1mcommitter.name [22mand their corresponding email options override [1muser.name [22mand [1muser.email [22mif set and are overridden themselves by the environment variables.

       The typical usage is to set just the [1muser.name [22mand [1muser.email [22mvariables; the other options are provided for more complex use cases.

[1mDATE FORMATS[0m
       The [1mGIT_AUTHOR_DATE[22m, [1mGIT_COMMITTER_DATE [22menvironment variables and the [1m--date [22moption support the following date formats:

       Git internal format
           It is [1m<unix timestamp> <time zone offset>[22m, where [1m<unix timestamp> [22mis the number of seconds since the UNIX epoch.  [1m<time zone offset> [22mis a positive or negative offset from UTC.
           For example CET (which is 1 hour ahead of UTC) is [1m+0100[22m.

       RFC 2822
           The standard email format as described by RFC 2822, for example [1mThu, 07 Apr 2005 22:13:13 +0200[22m.

       ISO 8601
           Time and date specified by the ISO 8601 standard, for example [1m2005-04-07T22:13:13[22m. The parser accepts a space instead of the [1mT [22mcharacter as well.

               [1mNote[0m
               In addition, the date part is accepted in the following formats: [1mYYYY.MM.DD[22m, [1mMM/DD/YYYY [22mand [1mDD.MM.YYYY[22m.

[1mDISCUSSION[0m
       Though not required, it‚Äôs a good idea to begin the commit message with a single short (less than 50 character) line summarizing the change, followed by a blank line and then a more
       thorough description. The text up to the first blank line in a commit message is treated as the commit title, and that title is used throughout Git. For example, [1mgit-format-patch[22m(1)
       turns a commit into email, and it uses the title on the Subject line and the rest of the commit in the body.

       Git is to some extent character encoding agnostic.

       ‚Ä¢   The contents of the blob objects are uninterpreted sequences of bytes. There is no encoding translation at the core level.

       ‚Ä¢   Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment
           variables and config files ([1m.git/config [22m(see [1mgit-config[22m(1)), [1mgitignore[22m(5), [1mgitattributes[22m(5) and [1mgitmodules[22m(5)).

           Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore, using
           non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will not work
           properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to display other
           encodings correctly.

       ‚Ä¢   Commit log messages are typically encoded in UTF-8, but other extended ASCII encodings are also supported. This includes ISO-8859-x, CP125x and many others, but [4mnot[24m UTF-16/32,
           EBCDIC and CJK multi-byte encodings (GBK, Shift-JIS, Big5, EUC-x, CP9xx etc.).

       Although we encourage that the commit log messages are encoded in UTF-8, both the core and Git Porcelain are designed not to force UTF-8 on projects. If all participants of a
       particular project find it more convenient to use legacy encodings, Git does not forbid it. However, there are a few things to keep in mind.

        1. [4mgit[24m [4mcommit[24m and [4mgit[24m [4mcommit-tree[24m issues a warning if the commit log message given to it does not look like a valid UTF-8 string, unless you explicitly say your project uses a
           legacy encoding. The way to say this is to have i18n.commitencoding in [1m.git/config [22mfile, like this:

               [i18n]
                       commitEncoding = ISO-8859-1

           Commit objects created with the above setting record the value of [1mi18n.commitEncoding [22min its [1mencoding [22mheader. This is to help other people who look at them later. Lack of this
           header implies that the commit log message is encoded in UTF-8.

        2. [4mgit[24m [4mlog[24m, [4mgit[24m [4mshow[24m, [4mgit[24m [4mblame[24m and friends look at the [1mencoding [22mheader of a commit object, and try to re-code the log message into UTF-8 unless otherwise specified. You can
           specify the desired output encoding with [1mi18n.logOutputEncoding [22min [1m.git/config [22mfile, like this:

               [i18n]
                       logOutputEncoding = ISO-8859-1

           If you do not have this configuration variable, the value of [1mi18n.commitEncoding [22mis used instead.

       Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not necessarily
       a reversible operation.

[1mENVIRONMENT AND CONFIGURATION VARIABLES[0m
       The editor used to edit the commit log message will be chosen from the [1mGIT_EDITOR [22menvironment variable, the core.editor configuration variable, the [1mVISUAL [22menvironment variable, or
       the [1mEDITOR [22menvironment variable (in that order). See [1mgit-var[22m(1) for details.

[1mHOOKS[0m
       This command can run [1mcommit-msg[22m, [1mprepare-commit-msg[22m, [1mpre-commit[22m, [1mpost-commit [22mand [1mpost-rewrite [22mhooks. See [1mgithooks[22m(5) for more information.

[1mFILES[0m
       [1m$GIT_DIR/COMMIT_EDITMSG[0m
           This file contains the commit message of a commit in progress. If [1mgit commit [22mexits due to an error before creating a commit, any commit message that has been provided by the
           user (e.g., in an editor session) will be available in this file, but will be overwritten by the next invocation of [1mgit commit[22m.

[1mSEE ALSO[0m
       [1mgit-add[22m(1), [1mgit-rm[22m(1), [1mgit-mv[22m(1), [1mgit-merge[22m(1), [1mgit-commit-tree[22m(1)

[1mGIT[0m
       Part of the [1mgit[22m(1) suite

                                                                                                                                                                               GIT-COMMIT(1)
